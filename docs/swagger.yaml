definitions:
  domain.UserRole:
    enum:
    - admin
    - customer
    type: string
    x-enum-varnames:
    - Admin
    - Customer
  dto.AddCartRequest:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  dto.AuthResponse:
    properties:
      access_token:
        example: v2.local.Gdh5kiOTyyaQ3_bNykYDeYHO21Jg2...
        type: string
    type: object
  dto.CategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.CheckoutRequest:
    properties:
      payment_method:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.PaymentRequest:
    properties:
      order_id:
        type: integer
    required:
    - order_id
    type: object
  dto.ProductRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    required:
    - category_id
    - description
    - name
    - price
    - stock
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: test@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        example: test@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
      role:
        allOf:
        - $ref: '#/definitions/domain.UserRole'
        example: admin
    required:
    - email
    - name
    - password
    - role
    type: object
  dto.UserResponse:
    properties:
      created_at:
        example: "1970-01-01T00:00:00Z"
        type: string
      email:
        example: test@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      updated_at:
        example: "1970-01-01T00:00:00Z"
        type: string
    type: object
  util.ErrorResponse:
    properties:
      key:
        type: string
      message:
        type: string
    type: object
  util.Meta:
    properties:
      code:
        type: integer
      errors:
        items:
          $ref: '#/definitions/util.ErrorResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  util.Response:
    properties:
      data: {}
      meta:
        $ref: '#/definitions/util.Meta'
    type: object
info:
  contact: {}
paths:
  /api/v1/auth:
    post:
      consumes:
      - application/json
      description: Create a new user account with default role "cashier"
      parameters:
      - description: Register request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "409":
          description: Data conflict error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Register a new user
      tags:
      - Users
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return an access token
      parameters:
      - description: Login request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad request (validation error)
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: User Login
      tags:
      - Auth
  /api/v1/auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh expired access token using refresh token
      parameters:
      - description: Refresh token request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed token
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad request (validation error)
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Refresh Access Token
      tags:
      - Auth
  /api/v1/carts:
    get:
      consumes:
      - application/json
      description: Get the list of products in the user's shopping cart
      produces:
      - application/json
      responses:
        "200":
          description: Cart retrieved successfully
          schema:
            $ref: '#/definitions/util.Response'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View user's cart
      tags:
      - Cart
    post:
      consumes:
      - application/json
      description: Add a product to the user's shopping cart
      parameters:
      - description: Add to cart request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AddCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product added to cart successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad request (validation error)
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add product to cart
      tags:
      - Cart
  /api/v1/categories:
    get:
      consumes:
      - application/json
      description: Fetches all categories available in the system
      produces:
      - application/json
      responses:
        "200":
          description: List of categories successfully retrieved
          schema:
            $ref: '#/definitions/util.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all categories
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Adds a new category to the system
      parameters:
      - description: Category request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Category created successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - Category
  /api/v1/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Removes a category from the system by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category deleted successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete category by ID
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Retrieves a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category found successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get category by ID
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: Updates an existing category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Category updated successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update category by ID
      tags:
      - Category
  /api/v1/checkout:
    post:
      consumes:
      - application/json
      description: Completes the checkout process for the user’s cart
      parameters:
      - description: Checkout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Checkout successful
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Checkout a cart
      tags:
      - Checkout
  /api/v1/orders:
    get:
      consumes:
      - application/json
      description: Retrieve a list of orders for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            $ref: '#/definitions/util.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Get User Orders
      tags:
      - Orders
  /api/v1/orders/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order details retrieved successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Get Order Detail
      tags:
      - Orders
  /api/v1/payments:
    post:
      consumes:
      - application/json
      description: Make a payment for a given order
      parameters:
      - description: Payment request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Payment successful
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad request, invalid payload
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Process Payment
      tags:
      - Payment
  /api/v1/products:
    get:
      description: Retrieve a list of available products
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            $ref: '#/definitions/util.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Add a new product to the system
      parameters:
      - description: Product request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product created successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /api/v1/products/{id}:
    delete:
      description: Remove a product from the system
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      description: Retrieve details of a specific product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product found
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Modify an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated product data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - Products
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: List users with pagination
      produces:
      - application/json
      responses:
        "200":
          description: Users displayed
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - Users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            $ref: '#/definitions/util.Response'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User displayed
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Get a user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user details like name, email, password, and role
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer {your_token}" to authenticate
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
